name: SampleApp CD

on:
  workflow_dispatch:
    inputs:
      run_number:
        description: 'Run number for the CI pipeline'
        required: false
        type: string
      source_artifact_name:
        description: 'Name of the build artifact to download (e.g., release-1.2.3-app-package)'
        required: false
        type: string
      deployment_scope:
        description: 'Defines the sequence of environments to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test
          - dev-then-test
          - dev-then-test-then-prod
          - test-then-prod

permissions:
  contents: read
  id-token: write # Required for OIDC with cloud providers

# Concurrency control for this specific application's CD pipeline
concurrency:
  group: sampleapp-cd-${{ github.event.inputs.deployment_scope }}-${{ github.event.inputs.version_to_deploy }}
  cancel-in-progress: false

jobs:
  debug:
    name: debug
    runs-on: ubuntu-latest
    outputs: 
      terraform_vars: ${{ steps.tf_vars.outputs.terraform-vars }}

    steps:
      - name: Debug Environment Variables
        shell: bash
        run: |
          echo "AZURE_CLIENT_ID is: ${{ vars.AZURE_CLIENT_ID_DEV  }}"
          echo "AZURE_TENANT_ID is: ${{ vars.AZURE_TENANT_ID_DEV }}"
          echo "AZURE_SUBSCRIPTION_ID is: ${{ vars.AZURE_SUBSCRIPTION_ID_DEV }}"
          echo "AZURE_CLIENT_SECRET is set: ${{ secrets.AZURE_CLIENT_SECRET_DEV != '' }}"
      - name: Prepare Terraform Variables
        id: tf_vars
        run: |
          # Build the terraform-vars string using environment variables
          terraform_vars=""
          terraform_vars+="sql_admin_login=${SQL_ADMIN_LOGIN}"$'\n'
          terraform_vars+="sql_admin_password=${SQL_ADMIN_PASSWORD}"$'\n'
          echo $terraform_vars
          # Use EOF delimiter to handle multiline output
          {
            echo "terraform-vars<<EOF"
            echo "$terraform_vars"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          SQL_ADMIN_LOGIN: ${{ vars.sql_admin_login_dev }}
          SQL_ADMIN_PASSWORD: ${{ secrets.sql_admin_password_dev }}
      - name: show vars
        run: |
          echo "terraform-vars ${{ steps.tf_vars.outputs.terraform-vars }}"
          echo "terraform_vars ${{ steps.tf_vars.outputs.terraform_vars }}"


  call_sequential_cd:
    name: SampleApp CD
    uses: InwardEcho/workflow-templates/.github/workflows/sequential-cd-workflow-composite.yml@main
    needs: [debug]
    with:
      # Core inputs from workflow_dispatch
      source_run_id: 11
      # source_run_id: ${{ github.event.inputs.run_number }}
      source_artifact_name: 'test'
      # source_artifact_name: ${{ github.event.inputs.source_artifact_name }}
      deployment_scope: ${{ github.event.inputs.deployment_scope }}
      

      # Application-specific parameters
      # db_migration_project_path: 'src/SampleApp.WebApp/SampleApp.WebApp.csproj'
      terraform_directory: 'infra'
      terraform-vars: ${{ needs.debug.outputs.terraform_vars }}
      terraform-var-file: dev.tfvars

      # azure_app_name: 'sampleapp'
    secrets:
      # Pass all necessary secrets
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID_DEV }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_DEV }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID_DEV }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID_DEV }}
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
      AZURE_CREDENTIALS_APP_SERVICE: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}
